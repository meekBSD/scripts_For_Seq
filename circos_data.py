#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os, sys, time
from collections import Counter
from collections import defaultdict
from glob import glob
## from Bio import SeqIO
from random import randint
from string import ascii_letters

fa_files = glob("*.fasta")
gff_files = glob("*.gff")

for i in fa_files:
    if len(i) > 24:
        new_name = i[:16].replace(".","") +".fasta" 
        os.rename(i, new_name)

#########################################################################################################
#################### Read the fasta from different organisms and create genome txt ######################
############################# read scaffolds IDs from reference genome ##################################
############################rename chr and assign colors of chromosome ###############################
#########################################################################################################

def P_F(f2):
    f_h = open(f2, 'r')
    seqs_Dict = {}
    for Line in f_h:
        if Line[0]==">":
            Name=Line.strip()[1:]
        else:
            try:
                seqs_Dict[Name]+=Line.strip()
            except KeyError:    
                seqs_Dict[Name]=Line.strip()
    f_h.close()
    return seqs_Dict

colors = [["vvlred","vlred","lred","red","dred","vdred","vvdred"],
          ["vvlpred", "vlpred", "lpred", "pred", "dpred", "vdpred", "vvdpred"],
          ["vvlgreen", "vlgreen" ,"lgreen", "green", "dgreen", "vdgreen", "vvdgreen"],
          ["vvlpgreen", "vlpgreen", "lpgreen", "pgreen", "dpgreen", "vdpgreen", "vvdpgreen"],
          ["vvlblue", "vlblue", "lblue", "blue", "dblue","vdblue","vvdblue"],
          ["vvlpblue", "vlpblue", "lpblue", "pblue", "dpblue", "vdpblue", "vvdpblue"],
          ["vvlpurple", "vlpurple", "lpurple", "purple", "dpurple", "vdpurple", "vvdpurple"],
          ["vvlppurple", "vlppurple", "lppurple", "ppurple", "dppurple", "vdppurple", "vvdppurple"],
          ["vvlorange", "vlorange", "lorange", "orange", "dorange", "vdorange", "vvdorange"],
          ["vvlporange", "vlporange", "lporange", "porange", "dporange", "vdporange", "vvdporange"],
          ["vvlyellow", "vlyellow", "lyellow", "yellow", "dyellow", "vdyellow", "vvdyellow"],
          ["vvlpyellow", "vlpyellow", "lpyellow", "pyellow", "dpyellow", "vdpyellow", "vvdpyellow"]]

Gen_num = 0
chr_files = glob("*chr_ID.txt")
start = time.time()

fa_files = glob("*.fasta")

if chr_files == []:
    for i in fa_files:
        with open(i.strip(".fasta")+"_genome.txt" , 'w') as genome_chr, open(i+ "_chr_ID.txt" ,'w') as chr_or_Scaf_ID:
            seqD = P_F(i)
            genome_ID = "F"+ascii_letters[Gen_num]
            print (genome_ID)
            n=1
            for chr_name, seq in seqD.items():
                Record_ID = genome_ID+ "_" + str(n)
                genome_chr.write("chr - {0} {1} 0 {2} {3}\n".format(Record_ID, n, len(seq), colors[randint(0,11)][randint(0,6)]))
                chr_or_Scaf_ID.write("{0}\t{1}\n".format(chr_name.split()[0], Record_ID))
                n += 1
        Gen_num += 1
        print ("The sequences number of " +i+ " is:")
        print (len(seqD))

end = time.time()

time_consum = end-start
print (time_consum)


#################### retrieve chromosome new name and store them in dict ###############################

chr_files = glob("*chr_ID.txt")
chr_Names = {}

for f in chr_files:
    chr_handle = open(f, 'r')
    for line in chr_handle:
        line_sp = line.rstrip().split("\t")
        r_ID = line_sp[1]
        chr_Names[line_sp[0]] = r_ID

    chr_handle.close()
print (chr_Names)

#############################################################################
########### get gene annotation of bacteria from gffs #####################
#############################################################################

if gff_files == []:
    for i in fa_files:
        os.popen("/home/yangjy/software/prokka-1.10/binaries/linux/prodigal -i " + i +" -d " + i.strip(".fasta") + "_Genes.fa -f gff -o " + i.strip(".fasta") +".gff")

Genome_F_ID = defaultdict(list)

# we can also use the original ffn file contain gene_seq ID and sequences generated by prodigal.
# prodigal_predict = os.popen("awk \'BEGIN{FS=\" # \"}/^>/{print $1\"\t\"$2\"\t\"$3\"\t\"$4}\' temp.orfs.ffn").read()
# for i in prodigal_predict.split("\n"):
#     I_SP = i.split("\t")

gff_files = glob("*.gff")
for i in gff_files:
    gff_file = open(i, "r")
    ideogram_file = open(i+ "_label.txt",'w')
    for j in gff_file:
        if j.startswith("#"):
            continue
        else:
            line = j.rstrip().split("\t")
            New_contigID = chr_Names[line[0]]
            gene_ID = line[0] + "_" + line[8].split(";")[0].split("_")[1]
            #print (gene_ID)
            Genome_F_ID[gene_ID].append(int(line[3]))          # gene start sit in line[3]
            Genome_F_ID[gene_ID].append(line[6])               # the strand of gene location
            strand = 1 if line[6] == "+" else -1
            ideogram_file.write("{0}\t{1}\t{2}\t{3}\n".format(New_contigID, line[3], line[4], strand))
    ideogram_file.close()
    gff_file.close()

####################################################################################################################
#######################blat the sequences from different source and get target region from psl file ################
######################################## get link regions from new genomes #########################################
####################################################################################################################

GeneFiles = [i.strip(".fasta") + "_Genes.fa" for i in fa_files]
print (GeneFiles)

psl_FL = []

for m, i in enumerate(fa_files):
    for n, j in enumerate(GeneFiles[m+1:]):
        psl_FL.append(i.rstrip(".fasta") + "_corresp_" + j.rstrip("_Genes.fa") + ".psl")
print (psl_FL) 

for i in psl_FL:
    psl_name = i.replace("_corresp", "")
    if not (os.path.exists(psl_name)):
    
        species_Names = i.split("_corresp_")
        genes_of_species = species_Names[0]
        genome_of_species = species_Names[1].strip(".psl")
        print (psl_name)
        os.popen("/home/qzy/software/blat/blat -minMatch=4 -maxGap=3 " + genome_of_species+ ".fasta " + genes_of_species +"_Genes.fa " + psl_name)

psl_files = glob("*.psl")

for i in psl_files:
    try:
        with open(i, 'r') as f, open(i.strip(".psl") + "_link.txt", 'w') as link_file:
            for num, line in enumerate(f):
                if num >= 5:
                    fields = line.rstrip().split("\t")
                    Query_N = fields[9]
                    Q_end = Genome_F_ID[Query_N][0] + int(fields[12])
                    Q_len = eval( fields[12] + "-" + fields[11])
                    Qstart = Genome_F_ID[Query_N][0] + int(fields[11])
                    Q_gene_ID = chr_Names[Query_N.split("_")[0]]
                    Target_sat = fields[15]
                    Target_end = fields[16]
                    Target_ID = chr_Names[fields[13]]

                    #if Genome_F_ID[Query_N][1] == fields[8]:         # compare the strand label in psl file and strand label in previous gff file
                    #    Q_strand = "+"
                    #else:
                    #    Q_strand = "-"
                    
                    query_strand_lab = Genome_F_ID[Query_N][1]
                    Target_strand = fields[8]

                    # put target sequence in front of Query sequences

                    if query_strand_lab == "+" and Target_strand == "+":         # + + is red
                        link_file.write("{0} {1} {2} {3} {4} {5} color=red\n".format(Target_ID, Target_sat, Target_end, Q_gene_ID, Qstart, Q_end))
                    elif query_strand_lab == "+" and Target_strand == "-":       # + - is yellow
                        link_file.write("{0} {1} {2} {3} {4} {5} color=yellow, thickness=5p\n".format(Target_ID, Target_sat, Target_end, Q_gene_ID, Qstart, Q_end))
                    elif query_strand_lab == "-" and Target_strand == "+":       # - + is blue
                        link_file.write("{0} {1} {2} {3} {4} {5} color=blue\n".format(Target_ID, Target_sat, Target_end, Q_gene_ID, Qstart, Q_end))
                    elif query_strand_lab == "-" and Target_strand == "-":       # - - is green
                        link_file.write("{0} {1} {2} {3} {4} {5} color=green, thickness=5p\n".format(Target_ID, Target_sat, Target_end, Q_gene_ID, Qstart, Q_end))
                    # print (num, "\t", line)
    except IOError:
        print ("The file {0} does not exist.".format(i))
